<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/28/hello-world/"/>
    <url>/2023/07/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2020/02/08/%E5%8D%95%E8%B0%83%E6%A0%88%20&amp;%20%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    <url>/2020/02/08/%E5%8D%95%E8%B0%83%E6%A0%88%20&amp;%20%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="单调栈-单调队列"><a href="#单调栈-单调队列" class="headerlink" title="单调栈 &amp; 单调队列"></a>单调栈 &amp; 单调队列</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>作用：$O(n)$时间内找出数组中每个数左(右)边第一个比它小(大)的数</p><p>以<strong>左</strong>和<strong>小</strong>为例</p><p><strong>关键：如果左边的数比当前这个数大或等于这个数，那么这个数一定不会被用到</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br><span class="hljs-keyword">while</span>(stk.<span class="hljs-built_in">size</span>() &amp;&amp; a[stk.<span class="hljs-built_in">top</span>()] &gt;= a[i]) stk.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//出栈 直到栈为空或栈顶小于当前元素</span><br><span class="hljs-comment">// 按题意 中间会有一些操作</span><br>    stk.<span class="hljs-built_in">push</span>(i);  <span class="hljs-comment">// 最后入栈</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>性质：出栈时，右边第一个比栈顶元素小的元素即为当前数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> w[N]; <span class="hljs-comment">// 用来存储右边第一个比自身小的元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123; <span class="hljs-comment">//小标从1开始，若右边不存在比自身小的元素，则为初始值0</span><br><span class="hljs-keyword">while</span>(stk.<span class="hljs-built_in">size</span>() &amp;&amp; a[stk.<span class="hljs-built_in">top</span>()] &gt; a[i]) <span class="hljs-comment">// 这里是大于而非大于等于</span><br>        w[stk.<span class="hljs-built_in">top</span>()] = i, stk.<span class="hljs-built_in">pop</span>();<br>    stk.<span class="hljs-built_in">push</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/832/">单调栈模版</a></p><p><a href="https://www.acwing.com/problem/content/description/602/">仰视奶牛</a> 利用性质</p><p><a href="https://www.acwing.com/problem/content/133/">直方图中的最大矩形</a> 求直方图最大对齐矩形 即求每一个元素的<strong>左右两边</strong>第一个比它<strong>小</strong>的元素</p><p><a href="https://www.acwing.com/problem/content/154/">城市游戏</a>  转化为求直方图中的最大矩形 (枚举底边)</p>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数论</title>
    <link href="/2020/02/08/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/02/08/%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="数论基础"><a href="#数论基础" class="headerlink" title="数论基础"></a>数论基础</h3><p>We have $a^2+b^2&#x3D;3025$,what’s the value of $a+b$ ?</p><p>sssss test</p><h4 id="1-相关定理"><a href="#1-相关定理" class="headerlink" title="1 相关定理"></a>1 相关定理</h4><h5 id="1-1-Fermat小定理"><a href="#1-1-Fermat小定理" class="headerlink" title="1.1 Fermat小定理"></a>1.1 Fermat小定理</h5><p>$p$ 为质数，若 $(a,p)&#x3D;1$，则 $a^{p-1}\equiv1(mod\ p)$。</p><h5 id="1-2-Euler定理"><a href="#1-2-Euler定理" class="headerlink" title="1.2 Euler定理"></a>1.2 Euler定理</h5><p>若 $(a,p)&#x3D;1$，则$a^{\varphi(p)-1}\equiv1(mod\ p)$，其中 $\varphi(p)$ 为Euler函数。</p><h5 id="1-3-斐蜀定理"><a href="#1-3-斐蜀定理" class="headerlink" title="1.3 斐蜀定理"></a>1.3 斐蜀定理</h5><p>任意整数 $a,b$ ，存在整数 $x,y$ ，满足$ax+by&#x3D;(a,b)$。</p><p>$proof:$   当 $b&#x3D;0$ 时 $(a,b)&#x3D;a$ 。当 $b\neq0$时，假设$(x,y) \rightarrow (a,b)$ ，$(x_1,y_1) \rightarrow (b,a % b)$ ，可以得到 $(x,y)$ 和 $(x_1,y_1)$ 之间的关系。由欧几里得算法可知 $(a,b)&#x3D;(b, a\ % \ b) &#x3D;…&#x3D;(x,0)$ 只需求得每一相邻层的 $x,y$ 关系通过递归即可得逆推得到 $(x,y)$ 。<br>$ax+by&#x3D;(a,b)&#x3D;bx_1+(a-b*\left \lfloor \frac{a}{b} \right \rfloor )y_1&#x3D;ay_1+b(x_1-\left \lfloor \frac{a}{b} \right \rfloor y_1)$ ,故有 $x&#x3D;y_1, y&#x3D;x_1-\left \lfloor \frac{a}{b} \right \rfloor y_1$ </p><p>往往会把斐蜀定理运用在扩展欧几里得算法中，既求出 $x$ 和 $y$ ，又求出 $(a,b)$ 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(!b) &#123;<br>x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a % b, y, x);   <span class="hljs-comment">// 换y与x的位置 简化更新x y的过程</span><br>y = y - (a / b) * x;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于一般的方程$ax+by&#x3D;c$，当且仅当 $d|c$ 才有解，可以先求出一组 $ax+by&#x3D;d$ 的特解 $x_0,y_0$ 再乘上 $\frac{c}{d}$ 即为一般方程的特解。事实上其通解可表示为 $x&#x3D;\frac{c}{d}x_0+k\frac{b}{d}$ 和 $y&#x3D;\frac{c}{d}y_0-k\frac{a}{d}$ 其中 $k\in Z$ 。</p><h4 id="3-乘法逆元"><a href="#3-乘法逆元" class="headerlink" title="3 乘法逆元"></a>3 乘法逆元</h4><p>$x &#x2F; a \equiv x * b (mod\ m)$ 则称 $b$ 为 $a$ 的模 $m$ 的乘法逆元。可以进一步转化为 $ab\equiv 1(mod\ m)$</p><p>$a$ 存在乘法逆元的充要条件是 $a$  与 $m$ 互质。</p><p>当 $m$ 为质数时<br>由<strong>Fermat小定理</strong>得乘法逆元 $b&#x3D;a^{m-2}$。$a^{m-2}$ 可能很大，可以模 $m$ ，因此可以利用快速幂 $qmi(a, m-2, m)$ 求得逆元。</p><p>当 $m$ 为合数时<br>由<strong>Euler定理</strong>可得 $b&#x3D;a^{\varphi(m)-2}$。也可以通过扩展欧几里得算法 $ax+py&#x3D;1$ 求得 $x$ ，显然 $ax\equiv1(mod\ p)$ 成立，故 $x$ 即为逆元。</p><h4 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h4><p>一、用数组存阶乘和阶乘的逆元  求多个模p的组合数<br>$factor[k]\equiv k!\ (mod\ p)$<br>$infactor[k]\equiv k!$  的逆元$\ (mod \ p)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">factor[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>factor[i] = factor[i - <span class="hljs-number">1</span>] * i % p;<br>infactor[i] = infactor[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>&#125;<br><span class="hljs-built_in">C</span>(a, b) = (<span class="hljs-number">1ll</span> * factor[a] * infactor[a - b] % p * infactor[b] % p + p) % p;<br></code></pre></td></tr></table></figure><p>二、只求某一个组合数模p的值</p><p>$Lucas$ 定理：$C_a^b\equiv C_{a\ mod \ p}^{b\ mod \ p}*C_{a&#x2F;p}^{b&#x2F;p}(mod \ p)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// a,b在int范围内时</span><br><span class="hljs-comment">// a,b一定要小于p</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;            <br><span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = a; i &lt;= b; i ++, j -- ) &#123;<br>res = <span class="hljs-number">1ll</span> * res * <span class="hljs-built_in">qmi</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>res = <span class="hljs-number">1ll</span> * res * j % p;<br>&#125;<br><span class="hljs-keyword">return</span> res % p;<br>&#125;<br><span class="hljs-comment">// a,b &gt; 2e9 lucas定理</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">else</span> <span class="hljs-number">1ll</span> * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) * <span class="hljs-built_in">C</span>(a % p, b % p, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure><p>三、求原组合数（无模p）</p><p>先筛质数，再根据$C_a^b&#x3D;\frac{a!}{b!(a-b)!}&#x3D;p_1^{\alpha_1}p_2^{\alpha_2}…p_k^{\alpha_k}$ 分解质因数，再利用高精度乘法<br>其中 $a!$ 中的 $p_i$ 的个数 $\alpha_i$ &#x3D; $\left \lfloor \frac{a}{p_i} \right \rfloor+\left \lfloor \frac{a}{p_i^2} \right \rfloor+…$<br>(数据过强可以用 $LL$ 压 $9$ 位）</p><h4 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h4><p>$n$ 个 $0$ 和 $n$ 个 $1$ ，它们将按照某种顺序排成 $2n$ 的序列，形成的序列中满足任意前缀序列中 $0$ 的个数不小于 $1$ 的个数的序列有多少种</p><p>假设序列不满足该条件，那么存在一个最小的 $p$ 使得前 $2p+1$ 个数中有 $p$ 个 $0$ 和 $p+1$ 个 $1$ ，将后面的$0$ 和 $1$ 取反，那么之后还剩下 $n-p$ 个 $1$ 和 $n-p-1$ 个 $0$ ，即得到了一个有 $n+1$ 个 $1$ 和 $n-1$ 个 $0$ 的序列。相反的，有 $n+1$ 个 $1$ 和 $n-1$ 个 $0$ 的序列也一定存在一个最小的 $p$ 使得前 $2p+1$ 个数中有 $p$ 个 $0$ 和 $p+1$ 个 $1$ 即不满足条件的序列与有 $n+1$ 个 $1$ 和 $n-1$ 个 $0$ 的序列形成一个双射。因此答案为 $C_{2n}^{n}-C_{2n}^{n+1}&#x3D;\frac{C_{2n}^{n}}{n+1}$ 。我们称这个数为卡特兰数。</p><p>拓展：</p><ol><li>$n$ 个左括号和 $n$ 个右括号组成的合法序列数为 $Cat_n$ </li><li>$1,2,…,n$ 经过栈，形成的合法出栈序列数为 $Cat_n$ </li><li>$n$ 个节点构成的不同二叉树数量为 $Cat_n$ </li><li>$n$ 个 $0$ 和 $m$ 个 $1$ ，$0$ 的个数不小于 $1$ 的个数的序列数为$C_{m+n}^{n}-C_{m+n}^{n+1}$  </li><li>从 $(0,0)$ 到 $(n,n)$ ，只能向上或者向右且不能碰到 $y&#x3D;x$ 的走法数为 $2Cat_{n-1}$</li></ol><p><a href="https://www.acwing.com/problem/content/1318/">有趣的数列</a> 性质满足从 $1$ 开始往 $2n$ 填，奇数项数始终不小于偶数项</p><p><a href="https://www.acwing.com/problem/content/1319/">树屋阶梯</a> 阶梯拼积木 满足 $f[n]&#x3D;\sum_{i&#x3D;0}^{n-1}f[i]f[n-1-i]$ </p><p><a href="https://www.acwing.com/problem/content/1317/">网格</a> 卡特兰数 $n,m$ 的情形 对应拓展4</p><p><a href="https://www.acwing.com/problem/content/1317/">概率论</a> 求 $n$ 个结点的二叉树叶子节点数的期望</p><p>设 $g[n];$ 为$n$ 个结点的二叉树叶子节点数的总和，$ f[n]$ 为 $n$ 个结点的二叉树的个数（即 $Cat_n$ )，则期望 $E&#x3D;\sum N_ip_i$ 其中 $p_i&#x3D;\frac{1}{f[n]}$  因此目标为 $E&#x3D;\sum N_ip_i&#x3D;\frac{g[n]}{f[n]}$ 即求 $n$ 个结点的二叉树叶子节点数的总和，对于任意一个 $n-1$ 个结点的二叉树有 $n$ 个位置可以添加叶子，因此 $g[n]&#x3D;f[n-1]*n$ 。</p>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
